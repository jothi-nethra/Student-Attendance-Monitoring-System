#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct Attendance {
    int studentID;
    char date[11]; // Format: YYYY-MM-DD
    char status[10]; // "Present" or "Absent"
    struct Attendance *next;
} Attendance;

Attendance* head = NULL;

// Function prototypes
Attendance* createRecord(int id, const char* date, const char* status);
void addAttendance(int id, const char* date, const char* status);
void deleteAttendance(int id, const char* date);
void searchAttendance(int id, const char* date);
void displayAttendanceByDate(const char* date);
void reverseDisplay(Attendance* node);
Attendance* cloneList(Attendance* src);
void displayAll();
void freeList(Attendance* head);

Attendance* createRecord(int id, const char* date, const char* status) {
    Attendance* newRec = (Attendance*)malloc(sizeof(Attendance));
    newRec->studentID = id;
    strcpy(newRec->date, date);
    strcpy(newRec->status, status);
    newRec->next = NULL;
    return newRec;
}

void addAttendance(int id, const char* date, const char* status) {
    Attendance* newRec = createRecord(id, date, status);
    if (head == NULL) {
        head = newRec;
    } else {
        Attendance* temp = head;
        while (temp->next != NULL)
            temp = temp->next;
        temp->next = newRec;
    }
    printf("‚úÖ Attendance record added successfully.\n");
}

void deleteAttendance(int id, const char* date) {
    if (head == NULL) {
        printf("‚ö†Ô∏è No records to delete.\n");
        return;
    }

    Attendance *temp = head, *prev = NULL;

    while (temp != NULL) {
        if (temp->studentID == id && strcmp(temp->date, date) == 0) {
            if (prev == NULL)
                head = temp->next;
            else
                prev->next = temp->next;
            free(temp);
            printf("‚úÖ Record deleted successfully.\n");
            return;
        }
        prev = temp;
        temp = temp->next;
    }

    printf("‚ö†Ô∏è Record not found.\n");
}

void searchAttendance(int id, const char* date) {
    Attendance* temp = head;
    while (temp != NULL) {
        if (temp->studentID == id && strcmp(temp->date, date) == 0) {
            printf("üîç Found: Student ID: %d | Date: %s | Status: %s\n", 
                   temp->studentID, temp->date, temp->status);
            return;
        }
        temp = temp->next;
    }
    printf("‚ö†Ô∏è Record not found.\n");
}

void displayAttendanceByDate(const char* date) {
    Attendance* temp = head;
    int found = 0;
    printf("\nüìÖ Attendance for %s:\n", date);
    printf("--------------------------------------\n");
    while (temp != NULL) {
        if (strcmp(temp->date, date) == 0) {
            printf("Student ID: %d | Status: %s\n", temp->studentID, temp->status);
            found = 1;
        }
        temp = temp->next;
    }
    if (!found)
        printf("‚ö†Ô∏è No attendance records found for %s.\n", date);
}

void reverseDisplay(Attendance* node) {
    if (node == NULL)
        return;
    reverseDisplay(node->next);
    printf("Student ID: %d | Date: %s | Status: %s\n", 
           node->studentID, node->date, node->status);
}

Attendance* cloneList(Attendance* src) {
    if (src == NULL)
        return NULL;

    Attendance* clonedHead = NULL, *clonedTail = NULL;

    while (src != NULL) {
        Attendance* newNode = createRecord(src->studentID, src->date, src->status);
        if (clonedHead == NULL)
            clonedHead = clonedTail = newNode;
        else {
            clonedTail->next = newNode;
            clonedTail = newNode;
        }
        src = src->next;
    }

    printf("‚úÖ Attendance list cloned successfully.\n");
    return clonedHead;
}

void displayAll() {
    Attendance* temp = head;
    if (temp == NULL) {
        printf("‚ö†Ô∏è No attendance records available.\n");
        return;
    }

    printf("\nüìã All Attendance Records:\n");
    printf("--------------------------------------\n");
    while (temp != NULL) {
        printf("Student ID: %d | Date: %s | Status: %s\n", 
               temp->studentID, temp->date, temp->status);
        temp = temp->next;
    }
}

void freeList(Attendance* head) {
    Attendance* temp;
    while (head != NULL) {
        temp = head;
        head = head->next;
        free(temp);
    }
}

int main() {
    int choice, id;
    char date[11], status[10];
    Attendance* adminClone = NULL;

    while (1) {
        printf("\n====== Student Attendance Monitoring System ======\n");
        printf("1. Add Attendance Record\n");
        printf("2. Delete Attendance Record\n");
        printf("3. Search Attendance\n");
        printf("4. Display Attendance by Date\n");
        printf("5. Display All Attendance (Reverse Order)\n");
        printf("6. Clone Attendance List (for Admin)\n");
        printf("7. Display All Records\n");
        printf("0. Exit\n");
        printf("==================================================\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        getchar(); // clear newline

        switch (choice) {
            case 1:
                printf("Enter Student ID: ");
                scanf("%d", &id);
                printf("Enter Date (YYYY-MM-DD): ");
                scanf("%s", date);
                printf("Enter Status (Present/Absent): ");
                scanf("%s", status);
                addAttendance(id, date, status);
                break;

            case 2:
                printf("Enter Student ID to delete: ");
                scanf("%d", &id);
                printf("Enter Date (YYYY-MM-DD): ");
                scanf("%s", date);
                deleteAttendance(id, date);
                break;

            case 3:
                printf("Enter Student ID to search: ");
                scanf("%d", &id);
                printf("Enter Date (YYYY-MM-DD): ");
                scanf("%s", date);
                searchAttendance(id, date);
                break;

            case 4:
                printf("Enter Date (YYYY-MM-DD): ");
                scanf("%s", date);
                displayAttendanceByDate(date);
                break;

            case 5:
                printf("\nüîÑ Attendance Records in Reverse Order:\n");
                printf("--------------------------------------\n");
                reverseDisplay(head);
                break;

            case 6:
                adminClone = cloneList(head);
                printf("\nüìÅ Cloned Records:\n");
                displayAll();
                break;

            case 7:
                displayAll();
                break;

            case 0:
                freeList(head);
                freeList(adminClone);
                printf("üëã Exiting the system. Goodbye!\n");
                exit(0);

            default:
                printf("‚ö†Ô∏è Invalid choice! Try again.\n");
        }
    }
}
